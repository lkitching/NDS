using System;
using System.Linq;
using System.Collections.Generic;
using FsCheck;

namespace NDS.Tests
{
    /// <summary>Utility class for generating random values.</summary>
    public static class TestGen
    {
        /// <summary>Generates a sequence of random ints from the given generator.</summary>
        /// <param name="random">The generator.</param>
        /// <returns>An infinite sequences of random ints generated from <paramref name="random"/>.</returns>
        public static IEnumerable<int> RandomInts(System.Random random = null)
        {
            random = random ?? new System.Random();
            return Generate(random, r => r.Next());
        }

        /// <summary>Generates between <paramref name="minCount"/> and <paramref name="maxCount"/> random ints generated by the given generator.</summary>
        /// <param name="minCount">The minimum number of numbers to generate.</param>
        /// <param name="maxCount">The maximum number of numbers to generate.</param>
        /// <param name="random">Random generator.</param>
        /// <returns>A sequence of between <paramref name="minCount"/> and <paramref name="maxCount"/> random ints.</returns>
        public static IEnumerable<int> NRandomInts(int minCount, int maxCount, System.Random random = null)
        {
            random = random ?? new System.Random();
            int count = random.Next(minCount, maxCount + 1);
            return RandomInts(random).Take(count);
        }

        /// <summary>Generates an infinite sequence of items generated using the given generator and generator transform.</summary>
        /// <typeparam name="T">The type of generated items.</typeparam>
        /// <param name="r">Random generator for the sequence.</param>
        /// <param name="gen">Used to generate the next item in the sequence using the random source.</param>
        /// <returns>An inifinite sequence of items generated from <paramref name="gen"/>.</returns>
        public static IEnumerable<T> Generate<T>(System.Random r, Func<System.Random, T> gen)
        {
            while (true)
            {
                yield return gen(r);
            }
        }

        /// <summary>Generates a random bool.</summary>
        /// <param name="r">Generator used to generate the result.</param>
        /// <returns>A bool generated randomly using <paramref name="r"/>.</returns>
        public static bool RandomBool(System.Random r = null)
        {
            r = r ?? new System.Random();
            return r.Next() % 2 == 0;
        }

        public static Gen<T[]> ArrayOf<T>(Gen<T> gen)
        {
            return Gen.ListOf(gen).Select(l => l.ToArray());
        }

        public static Gen<T[]> ArrayOf<T>(int n, Gen<T> gen)
        {
            return Gen.ListOf(n, gen).Select(l => l.ToArray());
        }

        public static Gen<T[]> NonEmptyArrayOf<T>(Gen<T> gen)
        {
            return Gen.NonEmptyListOf(gen).Select(l => l.ToArray());
        }
    }
}
